/**
 *
 * For a specified opening element, find the position of its closing partner, e.g. "(" and ")"
 *
 * @param {text} text - full text string to search within
 * @param {text} openChars - character that opens the section, e.g. "("
 * @param {text} closeChars - character that closes the section, e.g. ")"
 * @param {object} [optionsObject] - object containing options, defined below
 * @param {number} [optionsObject.pos_start] - position to begin search from; DEFAULT = 1
 * @param {number} [optionsObject.occurrence] - occurence of opening element pair to locate; DEFAULT = 1
 * @param {boolean} [optionsObject.includeQuoted] - if True, also look inside quoted text strings; DEFAULT = False
 * @param {boolean} [optionsObject.ignoreNesting] - if True, do not look at nested sets; DEFAULT = False
 *
 * @returnSuccess {number} position - position of the first character after the closing element
 * 
 * @module Parse
 * 
 * @version 1.5.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */


While ( 

	//// initial variables ////
	[ 

		// abstract function parameters
		~t = text ;
		~openChars = openChars ;
		~closeChars = closeChars ;
		~options = optionsObject ;

		// get options and set to variables
		~options = 
			If ( 
				IsEmpty ( ~options ) or Left ( JSONFormatElements ( ~options ) ; 1 ) = "?" ; 
				"{}" ; 
				~options 
				);
		~pos_start = Max ( JSONGetElement ( ~options ; "pos_start" ) ; 1 );
		~occurrence = Max ( JSONGetElement ( ~options ; "occurrence" ) ; 1 );
		~includeQuoted = 
			Case ( 
				~openChars = "\"" and ~closeChars = "\"" ; True ;
				GetAsBoolean ( JSONGetElement ( ~options ; "includeQuoted" ) )
				);
		~ignoreNesting = GetAsBoolean ( JSONGetElement ( ~options ; "ignoreNesting" ) );

		// misc var values
		~maxIterations = Length ( ~t );
		~numChars = Length ( ~t );
		~lengthOC = Length ( ~openChars );
		~lengthCC = Length ( ~closeChars );
		~pos_start = Max ( 1 ; Position ( ~t ; ~openChars ; ~pos_start ; ~occurrence ) );

		// init vars
		~num_openSets = 0 ;
		~result_pos = 0 ;
		~char = "" ;
		~charStr_OC = "" ;
		~charStr_CC = "" ;
		~char_previous = "" ;
		~state_ignore = False ;
		~state_inSet = False ;

		~i = Max ( ~pos_start ; 1 );
		~n = 1 ;

		~=""] ; 

	//// loop condition ///////
	~result_pos = 0 
	and ~i ≤ ~numChars 
	and ~n ≤ ~maxIterations ;

	//// logic ////////////////
	[ 

		~char_previous = ~char ;
		~char = Middle ( ~t ; ~i ; 1 );
		~charStr_OC = Middle ( ~t ; ~i ; ~lengthOC );
		~charStr_CC = Middle ( ~t ; ~i ; ~lengthCC );

		~foundOpenStr = ( ~charStr_OC = ~openChars );
		~foundCloseStr = ( ~charStr_CC = ~closeChars );


		///////////////////////////////////////////////
		// HANDLE QUOTATION MARKS / RAW TEXT STRING
		~is_validQuoteBookend = 
			~char_previous ≠ "\\" 
			and ~char = "\"" ;
		~state_ignore = 
			Case (
				~includeQuoted ; False ;
				~is_validQuoteBookend and not ~state_ignore ; True ;
				~is_validQuoteBookend and ~state_ignore ; False ;
				~state_ignore
				);
		///////////////////////////////////////////////


		// at the current parsing position, update how many open entity sets we have open (e.g. nesting)
		~num_openSets_prev = ~num_openSets ;
		~num_openSets =
			Case ( 
				~foundCloseStr and not ~state_ignore and ~num_openSets_prev > 0 ; Max ( ~num_openSets - 1 ; 0 );
				~foundOpenStr and ~ignoreNesting ; 1 ;
				~foundOpenStr and not ~state_ignore ; Max ( ~num_openSets + 1 ; 1 );
				~num_openSets
				);

		~result_pos = 
			Case ( 

				// if we found the closing string and: not ignoring, not inside any open sets (nested) and previously we were in an open set (for the instance of the opening string we found)
				~foundCloseStr and not ~state_ignore and ~num_openSets = 0 and ~num_openSets_prev > 0 ;
					~i + ~lengthCC ;

				// DEFAULT: keep the same value
				~result_pos

				);

		~i = ~i + 1 ;
		~n = ~n + 1 ;


		~=""] ; 


	//// result ///////////////
	Max ( 0 ; ~result_pos - 1 )

	)
