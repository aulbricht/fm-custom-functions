/**
 *
 * Set JSON object
 *
 * @param {text} json - initial JSON object
 * @param {text} key - key for the element
 * @param {text} value - value for the element
 * @param {text} type - e.g. JSONString, JSONNumber, etc.
 *
 * @returnSuccess {object} returns a valid JSON object
 * 
 * @returnError {array} error[n].code - error code
 * @returnError {array} error[n].descriptor - description of error
 * 
 * @module JSON
 * 
 * @version 1.0.2
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */

 Let ([
	~json = json;
	~key = key;
	~value = value;
	~type = type;

	// validate initial JSON
	~jsonVal = Case ( 
			// if JSON exists, check it for errors using JSONFormatElements function
			not IsEmpty ( ~json ); JSONFormatElements ( ~json );

			// if empty JSON...
			// ...and an array key, don't initialize the JSON
			Left( ~key ; 1 ) = "["; "";

			// ...and not an array key, initialize as JSON object
			"{}"
			);

	// set the JSON
	~jsonAltered = JSONSetElement ( ~jsonVal; ~key; ~value; ~type );

	// handle the results
	~result = Case (
				Left ( ~jsonVal; 1 ) = "?"; 
					JSONSetElement ("{}"; 
						[ "errorCode"; -3; JSONNumber ]; 
						[ "descriptor"; "JSON invalid"; JSONString ]
						);
				~key = "" ; 
					JSONSetElement ( ~json; 
						[ "errorCode"; -3; JSONNumber ]; 
						[ "descriptor"; "JSON invalid key: If you meant to set the root key, use a \".\" to do so"; JSONString ]
						);
				~jsonAltered
				);
	~left = Left ( ~result; 1 );
~=""];

If ( ~left = "{" or ~left = "["; JSONFormatElements ( ~result ); ~result )

)