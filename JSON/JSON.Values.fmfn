/**
 * 
 * List the values in a JSON object or nested object
 *
 * @param {text} json - JSON object
 * @param {text} key - key for the element
 *
 * @returnSuccess {object} returns a value list of values from the JSON object
 *
 * @returnError {array} error[n].code - error code
 * @returnError {array} error[n].descriptor - description of error
 * 
 * @module JSON
 * 
 * @version 1.0.2
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */

Let ([
	~json = json;
	~key = key;
	~jsonVal = JSONFormatElements ( ~json );
	~list_values = JSONListValues ( ~json; if( IsEmpty( ~key ); "."; ~key ));
	~result = Case (
				Left ( ~jsonVal; 1 ) = "?"; 
					JSONSetElement ("{}"; 
						[ "errorCode"; -3; JSONNumber ]; 
						[ "descriptor"; "JSON invalid"; JSONString ]
						);
				~key = "" ; 
					JSONSetElement ( ~json; 
						[ "errorCode"; -3; JSONNumber ]; 
						[ "descriptor"; "JSON invalid key: If you meant to set the root key, use a \".\" to do so"; JSONString ]
						);
				~list_values
				);
	~left = Left ( ~result; 1 );
~=""];

If ( ~left = "{" or ~left = "["; 
	JSONFormatElements ( ~result ); 
	~result 
)

)