/**
 *
 * Substitute whole word only, if adjacent to valid characters
 *
 * @param {text} text - full text string to search within
 * @param {text} searchString - search for this string in the text
 * @param {text} replaceWithString - replace with this string
 *
 * @returnSuccess {text} updated text string with whole word replacements
 * 
 * @note e.g. replace "test" when it's a whole word, but not when those 4 characters appear in a larger string like "testing"
 * 
 * @module Text
 * 
 * @version 1.1.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */



Let ([

	~f = text ;
	~targetStr = searchString ;
	~replaceStr = replaceWithString ;

	~validAdjacentChars = 
		" " // space 
		& "	" // tab 
		& "\"" // quotation mark
		& "¶;:'<>[]/,.&+-=*" ;

~=""];

While ( 

	//// initial variables ////
	[ 
		
		~result = ~f ;
		~candidateCount = PatternCount ( ~f ; ~targetStr );
		~length = Length ( ~targetStr );
		~pos_start = 1 ;
		~i = 1 ;
		
		~=""] ; 

	//// loop condition ///////
	~i ≤ ~candidateCount ; 

	//// logic ////////////////
	[ 

		~prev_pos_end = ~pos_start + If ( ~i > 1 ; ~length );
		~pos_start = 
			Max ( 
				Position ( ~result ; ~targetStr ; ~prev_pos_end ; 1 ); 
				1 
				);

		// get the candidate for substitution with the adjacent characters, front and back
		~candidateStr = Middle ( ~result ; ~pos_start - 1 ; ~length + 2 );
		
		// remove the candidate string, so all that's remaining are the adjascent characters
		~remainderStr = Replace ( ~candidateStr ; 2 ; ~length ; "" ); 

		// test to make sure the adjscent characters are valid
		~adjacentCharsCheck = Filter ( ~remainderStr ; ~validAdjacentChars );
		~validAdjChars = Length ( ~adjacentCharsCheck ) = 2;

		~result = 
			If ( ~validAdjChars ; 
				Replace ( ~result ; ~pos_start ; ~length ; ~replaceStr );
				~result
				);

		~i = ~i + 1 ;

		~=""] ; 

	//// result ///////////////
	Case ( 

		IsEmpty ( ~f ) ; "" ;
		IsEmpty ( ~targetStr ) ; ~f ;
		~result

		)

	)


)