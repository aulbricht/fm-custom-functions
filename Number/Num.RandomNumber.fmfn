/**
 *
 * Return a random number in the given range, within a given step size
 *
 * @param {number} low - bottom of the random number range
 * @param {number} high - top of the random number range
 * @param {number} [step_size] - OPTIONAL: step size for result number, DEFAULT: 1
 *
 * @returnSuccess {number}
 * 
 * @module Number (Num)
 * 
 * @version 2.0.3
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */


Let ([

	~high = high ;
	~low = low ;
	~step = Abs ( step_size );

	// if no step was given, use the default value
	~step = If ( IsEmpty ( ~step ) ; 1 ; ~step );

	// if one or more of the range values are below zero, we have to adjust so both numbers are positive
	~adjustment = If ( ~low < ~step or ~high < ~step ; 
				Abs ( Min ( ~low ; ~high )) + ~step ; 
				0 
				);
	~low = ~low + ~adjustment ;
	~high = ~high + ~adjustment ;

	// calculate random number on step within the given range
	~low = Max ( ~low ; ~step );
	~high = ~high + ~step - 1 ;
	~numItems = ~high - ~low + 1 ;
	~randomNum = Floor ( Random * ~numItems ) + ~low ;
	~result = ~randomNum - Mod ( ~randomNum ; ~step ) - ~adjustment ;

~=""];

~result

)
